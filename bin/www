#!/usr/bin/env node

/**
 * Module dependencies.
 */
 import app from '../src/app';
 var socketIO = require('socket.io');
 var fs = require('fs')
 var debug = require('debug')('ather:server');
 var http = require('http');
 var os = require('os');
 var cluster = require('cluster');
 
 
 /*if (cluster.isMaster) {
   var cpuCounts = os.cpus().length;
   console.log('cpu counts ', cpuCounts)
   for (let index = 0; index < cpuCounts; index++) {
     cluster.fork();
     console.log('index ', index);
   }
   cluster.on('exit', function (worker) {
     console.log('Worker %d died :(', worker.id);
     cluster.fork();
   });
 
 } else {*/
   var server = http.createServer(/*{
   key: fs.readFileSync('tajawal-ksa.com.key'),
   cert: fs.readFileSync('server.cert')
   },*/
   app);
 
   /**
    * Get port from environment and store in Express.
    */
 
   var port = normalizePort(process.env.PORT || '3001');
   app.set('port', port);
 
   /**
    * Create HTTP server.
    */
   /**
    * Listen on provided port, on all network interfaces.
    */
 
   server.listen(port);
   server.on('error', onError);
   server.on('listening', onListening);
 
   /** SOCKET*/
   var io = socketIO(server);
   var socketService = require('../socketService/socketIoService');
   socketService.startNotification(io);
   socketService.chat(io);
   socketService.admin(io);
   /**
    * Normalize a port into a number, string, or false.
    */
 
   function normalizePort(val) {
     var port = parseInt(val, 10);
 
     if (isNaN(port)) {
       // named pipe
       return val;
     }
 
     if (port >= 0) {
       // port number
       return port;
     }
 
     return false;
   }
 
   /**
    * Event listener for HTTP server "error" event.
    */
 
   function onError(error) {
     if (error.syscall !== 'listen') {
       throw error;
     }
 
     var bind = typeof port === 'string'
       ? 'Pipe ' + port
       : 'Port ' + port;
 
     // handle specific listen errors with friendly messages
     switch (error.code) {
       case 'EACCES':
         console.error(bind + ' requires elevated privileges');
         process.exit(1);
         break;
       case 'EADDRINUSE':
         console.error(bind + ' is already in use');
         process.exit(1);
         break;
       default:
         throw error;
     }
   }
 
   /**
    * Event listener for HTTP server "listening" event.
    */
 
   function onListening() {
     var addr = server.address();
     var bind = typeof addr === 'string'
       ? 'pipe ' + addr
       : 'port ' + addr.port;
     debug('Listening on ' + bind);
   }
 //}
 